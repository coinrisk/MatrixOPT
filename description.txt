Замощение — метод, в котором вы разделяете данные на подмножества одинакового размера, известные как tiles(мозаики). Три позиции изменяются при использовании замощения.
Можно создать переменные tile_static. Доступ к данным в пространстве tile_static может быть в несколько раз быстрее, чем доступ к данным в глобальной области. Экземпляр переменной tile_static создается для каждой мозаики, и все потоки в мозаике имеют доступ к этой переменной. Основное преимущество замощения — выигрыш в производительности из-за доступа tile_static.
Можно вызвать метод tile_barrier::wait для остановки всех потоков в одной мозаике в указанной строке кода. Невозможно гарантировать порядок, в котором работают потоки, гарантировано только то, что все потоки в одной мозаике остановятся при вызове tile_barrier::wait перед тем, как возобновить выполнение.
Имеется доступ к индексу потока по отношению к всему объекту array_view и к индексу относительно мозаики. С помощью локального индекса можно сделать код более удобным для чтения и отладки.
Чтобы воспользоваться преимуществами замощения при умножении матриц, алгоритм должен разбить матрицу на мозаики, а затем скопировать данные мозаики в переменные tile_static для ускорения доступа. В этом примере матрица разделена на подматрицы одинакового размера. Результат найден перемножением подматриц. Две матрицы и их произведение в этом примере:
Матрица 4x4
Матрица 4x4
Матрица 4x4
Матрицы делятся на четыре матрицы 2x2, которые определяются следующим образом:
Матрица 4x4, разделенная на матрицы 2x2
Матрица 4x4, разделенная на матрицы 2x2
Произведение A и B теперь можно записать и вычислить следующим образом:
Матрица 4x4, разделенная на матрицы 2x2
Поскольку матрицы a через h — матрицы 2x2, то все их произведения и суммы также являются матрицами 2x2. Из этого также следует, что A*B — матрица 4x4, как и ожидалось. Чтобы быстро проверить алгоритм, посчитайте значение элемента в первой строке, первом столбце произведения. В примере это было бы значением элемента в первой строке и первом столбце ae + bg. Вы только должны вычислить первый столбец, первую строку ae и bg для каждого члена. Значение ae равно 1*1 + 2*5 = 11. Значение bg равно 3*1 + 4*5 = 23. Конечное значение 11 + 23 = 34, что верно.
Для реализации этого алгоритма, код:
Использует объект tiled_extent вместо объекта extent в вызове parallel_for_each.
Использует объект tiled_index вместо объекта index в вызове parallel_for_each.
Создает tile_static переменные для хранения подматриц.
Использует метод tile_barrier::wait, чтобы остановить потоки для вычисления произведения подматриц.